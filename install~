#!/bin/sh

# by Jaroslav Vitku [vitkujar@fel.cvut.cz]

# After downloading the project into your computer, run this script to 
# install rosjava libraries and initialize Nengoros Eclipse projects  

# This script does:
#   -compiles rosjava and installs it into local maven repository (~/.m2/repository/)
#       -this repository is then used by nengoros and by arbitrary other rosjava nodes 
#   -builds all nengoros projects without running tests (TODO: some nengo tests fail)
#   -creates eclipse projects for everything useful in nengoros multi-project


# note that all (rosjava-dependent) projects are dependent on maven rosjava installation
# this should be easily changed though.. 

# The ROS_PACKAGE_PATH should point to the ROS installation and/or to the current folder
echo "\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX "
echo "   XXXXXXXX Checking the ROS_PACKAGE_PATH .."
echo "      XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n"

# Basically: ROS installation sets this path to its own ros/[ROS-version]/share folder
# If this path is not set, ROS is probably not installed and this script presumes the 
# rosjava_core installation as a standalone version => sets the path to the current folder.
# 
# 
# Note that user may want to use custom messages (e.g. for vivae simulator) which are not defined 
# in this folder. In this case, add these messages to $ROS_PACKAGE_PATH and rerun this script! 
IGNORELOCAL=0        # should we ignore messages in the current folder if ROS found?

if [ -z "$ROS_PACKAGE_PATH" ]; then

	echo "ROS probably not installed (ROS_PACKAGE_PATH not set) setting it to PWD.." 
    	export ROS_PACKAGE_PATH=$PWD
else
	echo "exiiists"
	if [ "$IGNORELOCAL" -eq "1" ]; then
		echo "ROS_PACKAGE_PATH is already set, and we should ignore local messages. Doing nothing.."
	else
		echo "ROS_PACKAGE_PATH is set, adding this directory at the end."
		export ROS_PACKAGE_PATH=$ROS_PACKAGE_PATH:$PWD
	fi
fi

echo "ROS_PACKAGE_PATH="$ROS_PACKAGE_PATH 


echo "\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX "
echo "   XXXXXXX Building rosjava and installing it to local maven repository"
echo "      XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n"

cd rosjava_core
# note: after runnign this script, project rosjava/rosjava_messages/.classpath could contain
# duplicate entry. This is due to Gradle error, e.g. delete one entry (and refresh Eclipse)
if [ -f rosjava_messages/.classpath ]; then rm rosjava_messages/.classpath
fi

# gradle error, duplicate entry path="org.eclipse.jdt.launching.JRE_CONTAINER"
if [ -f ../nengo/simulator/.classpath ]; then rm ../nengo/simulator/.classpath 
fi
if [ -f ../nengo/simulator-ui/.classpath ]; then rm ../nengo/simulator-ui/.classpath 
fi

# Nengo tests can fail, authors say that it is OK, so continue after fails
#./gradlew clean install eclipse --continue
./gradlew clean install installApp eclipse --continue -x test


#echo "\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX "
#echo "   XXXXXXX Building all Nengoros projects (without running tests) and creating Eclipse projects "
#echo "      XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n"

#cd ../
#./gradlew clean build -x test eclipse


#echo "\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX "
#echo "   XXXXXXX Installing subproject testnodes also as an application (so you can run: ./run org...)"
#echo "      XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n"

#cd testnodes
#./gradlew install installApp

echo "\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX "
echo "   XXXXXXX Installing the rest of the multiproject by means of gradle"
echo "      XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n"

cd ../ && ./gradlew install eclipse

# we actually do not wont top-level projects to be imported in eclipse (but the lower ones)
# TODO: make this nicer
rm nengo/.project
rm .project

############# init other java nodes?
#INITNODES=1
#if [ "$INITNODES" -eq "1" ]; then
#    cd ../../javanodes/
#	./initjavanodes
#fi

echo "\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX "
echo "   XXXXXXX All done.. "
echo "      XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n"


echo "ready to use rosjava_core, start with launching ./jroscore/jroscore"
#echo "\n PS: Now you can open all Nengoros projects in Eclipse and write your custom nodes "
#echo " which depend on maven (~/.m2/....) installation of rosjava..\n "


