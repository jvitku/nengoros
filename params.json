{"name":"Nengoros","tagline":"An open-source SW tool for simulating large-scale hybrid neural network systems.","body":"NengoRos\r\n=========\r\n\r\nOfficial site of this project: [http://nengoros.wordpress.com](http://nengoros.wordpress.com).\r\n\r\nThis is Nengoros, a tool which merges [Nengo](https://github.com/ctn-waterloo/nengo_1.4) and [rosjava_core](https://github.com/rosjava/rosjava_core) in order to simulate large-scale hybrid neural systems capable of interfacing with real robotic systems. Official site of this project is: \r\n\r\nAuthor Jaroslav Vitku, research under [Alife group]((http://artificiallife.co.nf/projects/) on [Department of Cybernetics](http://cyber.felk.cvut.cz/) on CTU in Prague. \r\n\r\nThe simulator is composed of the following parts (all credits to their authors):\r\n\r\n* [Nengo simulator](http://nengo.ca/) - large scale neural simulations (original readme moved to `nengo/README_origNengo.rst`)\r\n* [Rosjava_core](http://wiki.ros.org/rosjava) - java-based implementation of ROS core\r\n\r\n\t-and potentially with some necessary ROS-components (e.g. [messages](http://wiki.ros.org/std_msgs)) included\r\n\r\nTogether, these packages provide mostly platform-independent **tool for simulating hybrid neural systems** usable e.g. for experiments with e.g.:\r\n\r\n* cognitive modeling\r\n* neuro-evolution\r\n* running simulations of hybrid modular systems composed of arbitrary reusable ([ROS](http://wiki.ros.org/)) nodes\r\n* direct robot control\r\n* ...and much more.\r\n\r\nJavadocs\r\n-------------\r\n\r\nNate that links in this section will be \"browsable\" only offline or from the github page of this project on: [http://jvitku.github.io/nengoros/](http://jvitku.github.io/nengoros/).\r\n\r\n* Nengo/simulator [project](javadoc/nengo/simulator/javadoc/index.html).\r\n* Nengo/simulator-ui [project](javadoc/nengo/simulator-ui/javadoc/index.html).\r\n* Demonodes/basic [project](javadoc/demonodes/basic/javadoc/index.html).\r\n* Jroscore [project](javadoc/jroscore/javadoc/index.html).\r\n* Logic/gates [project](javadoc/logic/gates/javadoc/index.html).\r\n* Vivae/vivaesimulator [project](javadoc/vivae/vivaesimulator/javadoc/index.html).\r\n* Vivae/vivaeplugin [project](javadoc/vivae/vivaeplugin/javadoc/index.html).\r\n\r\nJavadoc for sub-projects which are not available here can be generated from the particular project folder by the following command:\r\n\r\n\t./gradlew javadoc\r\n\r\nTe resulting documentation will be placed under `[projectName]/build/doc/` folder.\r\n\r\nPrerequisites:\r\n-------------\r\n##### Download additional python-based ROS **wstool** and init it:\r\n\r\n\tpip install -U wstool\r\n\t\r\n\r\n* or download and \"python setup.py install\" them from [here](https://github.com/vcstools/)\r\n* or \"sudo apt-get install python-wstool\" on linux\r\n\r\n\r\n \r\n##### Create python **virtualenv** called nengoros (optional):\r\n\r\n* download fortran\r\n\r\n\t\tbrew install gfortran\r\n\r\n* download virtualenv and wrapper\r\n\r\n\t\tsudo pip install virtualenv\r\n\t\tsudo pip install virtualenvwrapper\r\n\r\n* create ~/.virtualenvs directory\r\n\r\n\t\tsource /usr/local/bin/virtualenvwrapper.sh \r\n\t\r\n* create your virtualenv\r\n\r\n\t\tmkvirtualenv nengoros\r\n\t\tsource ~/.virtualenvs/nengoros/bin/activate\r\n \r\n\r\n##### Install **scipy** and **numpy** (also optional):\r\n\r\n\tpip install numpy\t\r\n\tpip install scipy\r\n\r\n\r\nInstallation:\r\n--------------\r\n\r\n* Make folder with workspace:\r\n\r\n\t\tmkdir -p ~/workspace && cd ~/workspace\r\n\t\r\n* In case of ROS not installed, point the ROS\\_PACKAGE_PATH into this folder (add to your ~/.profie or ~/.bashrc file )\r\n\r\n\t\texport ROS_PACKAGE_PATH=~/workspace\r\n\t\r\n* Download Nengoros configuration:\r\n\r\n\t\tgit clone -b nengoros-master-v0.0.4 https://github.com/jvitku/nengoros.git\r\n\r\n\t\r\n* Download all repositories and install them (./tool -h)\r\n\r\n\t\tcd nengoros\r\n\t\t./tool -unrf\r\n\r\n\r\n* In Eclipse, import all auto-generated projects from nengoros folder (it is necessary to check the check-box `search for nested projects`, and after importing delete the projectTemplate), clean & build them in Eclipse. \r\n\r\nRunning\r\n---------\r\n\r\n* Now the simulator can be launched from class files generated by Eclipse. In order to [launch GUI](http://nengo.ca/docs/html/tutorial1.html), start the script under nengo/simulator-ui:\r\n\r\n\t\t./nengo\r\n\t\r\n* In order to launch [command-line interface](http://nengo.ca/docs/html/scripting_interface.html#running-scripts-from-the-command-line), start the:\r\n\r\n\t\t./nengo-cl\r\n\r\n\r\nDemos\r\n-------\r\n\r\nDemos for the Nengoros can be found on the official project site[http://nengoros.wordpress.com](http://nengoros.wordpress.com).\r\n\r\nAdditionaly, there are two choices how to learn with NengoROS:\r\n\r\n##### Learn with Nengo part:\r\n\t\r\n* All demos of original Nengo simulator are unchanged and can be found under `nengo/simulator-ui/demo`\r\n* To see detailed information about these demo, go to [Nengo demos](http://nengo.ca/docs/html/tutorial.html) from Waterloo University.\r\n\r\n##### Learn with Nengo-ROS part:\r\n\r\n* These simple demos show how the modified Nengo can employ ROS nodes in the simulation.\r\n* The demo scripts can be found under: `nengo/simulatori-ui/nr-demo`\r\n* The Nengoros currently features sub-project `demonodes`, where all demos are placed, see its [readme](https://github.com/jvitku/demonodes) for all information.\r\n* To se more information go to [Nengoros tutorials](http://nengoros.wordpress.com/tutorials/). \r\n\r\n\r\nAdditional information\r\n-----------------------\r\n\r\n\r\nThe tool script is used to update the multi-project from repositories. Now, the complete.rosinstall version is suported. Various older versions are placed under `.versions` folder. In case you want to choose which version to use, e.g. for rosbased (creates .rosinstal file):\r\n\r\n\twstool init -j8 . .versions/rosbased.rosinstall\r\n\r\nRun the tool script:\r\n\r\n\t./tool -unrf\r\n\t\r\n..this will:\r\n\r\n* \tupdate all repositories from remote\r\n*\tcompile rosjava_core and install it into ~/.m2 repository\r\n*\tcompile and install other nengoros components (e.g. install jroscore into ~/.m2 repo and creates runnable application under `jroscore` folder etc..)\r\n\r\n###Information about updating Nengoros:\r\n\r\nTHe script tool can update all projects from remote repositories:\r\n\r\n\t\t./tool -h\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}